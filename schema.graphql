schema {
  query: QueryRoot
}

type AccountPointMap {
  lifeTimePoints: Int!
  name: String!
  totalPoints: Int!
}

input CoordinateSearchInput {
  distance: Float!
  lat: Float!
  lng: Float!
}

type Deal {
  code(input: DealCodeInput!): OfferResponse!
  currentDeals: [GetDealsOffer!]!
  lastRefresh: String!
}

input DealCodeInput {
  storeId: String!
  uuid: String!
}

type GetDealsOffer {
  count: Int!
  creationDateUtc: String!
  dealUuid: String!
  description: String!
  imageUrl: String!
  name: String!
  offerPropositionId: String!
  price: Float
  shortName: String!
  validFromUtc: String!
  validToUtc: String!
}

type Location {
  coordinates(input: CoordinateSearchInput!): [RestaurantInformation!]!
  text(input: TextSearchInput!): [RestaurantInformation!]!
}

type OfferResponse {
  dealUuid: String
  message: String!
  randomCode: String!
}

input PointsFilterInput {
  minimumPoints: Int!
}

type QueryRoot {
  deal: Deal!
  location: Location!
  points(filter: PointsFilterInput): [AccountPointMap!]!
  user: User!
}

type RestaurantAddress {
  addressLine: String!
}

type RestaurantInformation {
  address: RestaurantAddress!
  name: String!
  storeNumber: Int!
}

input TextSearchInput {
  query: String!
}

type User {
  config: UserOptions!
  id: String!
  role: UserRole!
}

type UserOptions {
  storeId: String!
  storeName: String
}

enum UserRole {
  ADMIN
  NONE
  PRIVILEGED
}
