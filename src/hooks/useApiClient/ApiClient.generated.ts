//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

// @ts-nocheck

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api.maccas.one/v1";
    }

    /**
     * @param role Role to use for this user
     * @param single_use (optional)
     * @return Token that can be used for registration
     */
    registration_token(role: UserRole, single_use?: boolean | null | undefined, signal?: AbortSignal | undefined): Promise<ApiResponse<RegistrationTokenResponse>> {
        let url_ = this.baseUrl + "/admin/auth/register?";
        if (role === undefined || role === null)
            throw new Error("The parameter 'role' must be defined and cannot be null.");
        else
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (single_use !== undefined && single_use !== null)
            url_ += "single_use=" + encodeURIComponent("" + single_use) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegistration_token(_response);
        });
    }

    protected processRegistration_token(response: Response): Promise<ApiResponse<RegistrationTokenResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as RegistrationTokenResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<RegistrationTokenResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return List of currently locked deals
     */
    get_locked_deals(signal?: AbortSignal | undefined): Promise<ApiResponse<string[]>> {
        let url_ = this.baseUrl + "/admin/locked-deals";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_locked_deals(_response);
        });
    }

    protected processGet_locked_deals(response: Response): Promise<ApiResponse<string[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as string[];
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<string[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @param duration (optional)
     * @return Lock this deal
     */
    lock_deal(deal_id: string, duration?: number | null | undefined, signal?: AbortSignal | undefined): Promise<ApiResponse<void>> {
        let url_ = this.baseUrl + "/admin/locked-deals/{deal_id}?";
        if (deal_id === undefined || deal_id === null)
            throw new Error("The parameter 'deal_id' must be defined.");
        url_ = url_.replace("{deal_id}", encodeURIComponent("" + deal_id));
        if (duration !== undefined && duration !== null)
            url_ += "duration=" + encodeURIComponent("" + duration) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLock_deal(_response);
        });
    }

    protected processLock_deal(response: Response): Promise<ApiResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return new ApiResponse(status, _headers, null as any);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<void>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Unlocked deal
     */
    unlock_deal(deal_id: string, signal?: AbortSignal | undefined): Promise<ApiResponse<void>> {
        let url_ = this.baseUrl + "/admin/locked-deals/{deal_id}";
        if (deal_id === undefined || deal_id === null)
            throw new Error("The parameter 'deal_id' must be defined.");
        url_ = url_.replace("{deal_id}", encodeURIComponent("" + deal_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUnlock_deal(_response);
        });
    }

    protected processUnlock_deal(response: Response): Promise<ApiResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return new ApiResponse(status, _headers, null as any);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<void>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return List of currently locked deals
     */
    get_all_user_spending(signal?: AbortSignal | undefined): Promise<ApiResponse<{ [key: string]: AdminUserSpending; }>> {
        let url_ = this.baseUrl + "/admin/user/spending";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_all_user_spending(_response);
        });
    }

    protected processGet_all_user_spending(response: Response): Promise<ApiResponse<{ [key: string]: AdminUserSpending; }>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as { [key: string]: AdminUserSpending; };
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<{ [key: string]: AdminUserSpending; }>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Login and fetch auth and refresh tokens
     */
    login(body: LoginRequest, signal?: AbortSignal | undefined): Promise<ApiResponse<TokenResponse>> {
        let url_ = this.baseUrl + "/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = Object.keys(body as any).map((key) => {
            return encodeURIComponent(key) + '=' + encodeURIComponent((body as any)[key]);
        }).join('&')

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<ApiResponse<TokenResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as TokenResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Account doesn\'t exist", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Authentication failed", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<TokenResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Register a new account using a shared token
     */
    register(body: RegistrationRequest, signal?: AbortSignal | undefined): Promise<ApiResponse<TokenResponse>> {
        let url_ = this.baseUrl + "/auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = Object.keys(body as any).map((key) => {
            return encodeURIComponent(key) + '=' + encodeURIComponent((body as any)[key]);
        }).join('&')

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<ApiResponse<TokenResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as TokenResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Token has expired", status, _responseText, _headers);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            return throwException("Account with this username already exists", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<TokenResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Trade previous access and refresh token for new ones
     */
    get_token(body: TokenRequest, signal?: AbortSignal | undefined): Promise<ApiResponse<TokenResponse>> {
        let url_ = this.baseUrl + "/auth/token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_token(_response);
        });
    }

    protected processGet_token(response: Response): Promise<ApiResponse<TokenResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as TokenResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<TokenResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Random code for specified deal
     */
    get_code(deal_id: string, store: string, signal?: AbortSignal | undefined): Promise<ApiResponse<OfferResponse>> {
        let url_ = this.baseUrl + "/code/{deal_id}?";
        if (deal_id === undefined || deal_id === null)
            throw new Error("The parameter 'deal_id' must be defined.");
        url_ = url_.replace("{deal_id}", encodeURIComponent("" + deal_id));
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined and cannot be null.");
        else
            url_ += "store=" + encodeURIComponent("" + store) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_code(_response);
        });
    }

    protected processGet_code(response: Response): Promise<ApiResponse<OfferResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as OfferResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Deal not found", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<OfferResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return List of available deals
     */
    get_deals(signal?: AbortSignal | undefined): Promise<ApiResponse<GetDealsOffer[]>> {
        let url_ = this.baseUrl + "/deals";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_deals(_response);
        });
    }

    protected processGet_deals(response: Response): Promise<ApiResponse<GetDealsOffer[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as GetDealsOffer[];
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<GetDealsOffer[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Last Refresh of Cache
     */
    get_last_refresh(signal?: AbortSignal | undefined): Promise<ApiResponse<LastRefreshInformation>> {
        let url_ = this.baseUrl + "/deals/last-refresh";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_last_refresh(_response);
        });
    }

    protected processGet_last_refresh(response: Response): Promise<ApiResponse<LastRefreshInformation>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as LastRefreshInformation;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<LastRefreshInformation>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Information for specified deal
     */
    get_deal(deal_id: string, signal?: AbortSignal | undefined): Promise<ApiResponse<GetDealsOffer>> {
        let url_ = this.baseUrl + "/deals/{deal_id}";
        if (deal_id === undefined || deal_id === null)
            throw new Error("The parameter 'deal_id' must be defined.");
        url_ = url_.replace("{deal_id}", encodeURIComponent("" + deal_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_deal(_response);
        });
    }

    protected processGet_deal(response: Response): Promise<ApiResponse<GetDealsOffer>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as GetDealsOffer;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Deal not found", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<GetDealsOffer>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Removed a deal
     */
    remove_deal(deal_id: string, store: string, signal?: AbortSignal | undefined): Promise<ApiResponse<void>> {
        let url_ = this.baseUrl + "/deals/{deal_id}?";
        if (deal_id === undefined || deal_id === null)
            throw new Error("The parameter 'deal_id' must be defined.");
        url_ = url_.replace("{deal_id}", encodeURIComponent("" + deal_id));
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined and cannot be null.");
        else
            url_ += "store=" + encodeURIComponent("" + store) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove_deal(_response);
        });
    }

    protected processRemove_deal(response: Response): Promise<ApiResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return new ApiResponse(status, _headers, null as any);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Error on McDonald\'s side", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Deal not found", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<void>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Added a deal
     */
    add_deal(proposition_id: string, store: string, signal?: AbortSignal | undefined): Promise<ApiResponse<OfferResponse>> {
        let url_ = this.baseUrl + "/deals/{proposition_id}?";
        if (proposition_id === undefined || proposition_id === null)
            throw new Error("The parameter 'proposition_id' must be defined.");
        url_ = url_.replace("{proposition_id}", encodeURIComponent("" + proposition_id));
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined and cannot be null.");
        else
            url_ += "store=" + encodeURIComponent("" + store) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdd_deal(_response);
        });
    }

    protected processAdd_deal(response: Response): Promise<ApiResponse<OfferResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as OfferResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Error on McDonald\'s side", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No deals found of this type", status, _responseText, _headers);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            return throwException("This deal is temporarily unavailable", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<OfferResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return JSON OpenApi spec
     */
    get_openapi(signal?: AbortSignal | undefined): Promise<ApiResponse<string>> {
        let url_ = this.baseUrl + "/docs/openapi";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_openapi(_response);
        });
    }

    protected processGet_openapi(response: Response): Promise<ApiResponse<string>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : _responseText as string;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<string>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Server is healthy
     */
    get_status(signal?: AbortSignal | undefined): Promise<ApiResponse<void>> {
        let url_ = this.baseUrl + "/health/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_status(_response);
        });
    }

    protected processGet_status(response: Response): Promise<ApiResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return new ApiResponse(status, _headers, null as any);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<void>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return List of locations near specified coordinates
     */
    get_locations(distance: number, latitude: number, longitude: number, signal?: AbortSignal | undefined): Promise<ApiResponse<RestaurantInformation[]>> {
        let url_ = this.baseUrl + "/locations?";
        if (distance === undefined || distance === null)
            throw new Error("The parameter 'distance' must be defined and cannot be null.");
        else
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (latitude === undefined || latitude === null)
            throw new Error("The parameter 'latitude' must be defined and cannot be null.");
        else
            url_ += "latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === undefined || longitude === null)
            throw new Error("The parameter 'longitude' must be defined and cannot be null.");
        else
            url_ += "longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_locations(_response);
        });
    }

    protected processGet_locations(response: Response): Promise<ApiResponse<RestaurantInformation[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as RestaurantInformation[];
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Invalid/missing parameters", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<RestaurantInformation[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Closest location near specified text
     */
    search_locations(text: string, signal?: AbortSignal | undefined): Promise<ApiResponse<RestaurantInformation[]>> {
        let url_ = this.baseUrl + "/locations/search?";
        if (text === undefined || text === null)
            throw new Error("The parameter 'text' must be defined and cannot be null.");
        else
            url_ += "text=" + encodeURIComponent("" + text) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch_locations(_response);
        });
    }

    protected processSearch_locations(response: Response): Promise<ApiResponse<RestaurantInformation[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as RestaurantInformation[];
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No locations found", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<RestaurantInformation[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return List of all account points
     */
    get_points(signal?: AbortSignal | undefined): Promise<ApiResponse<AccountPointMap[]>> {
        let url_ = this.baseUrl + "/points";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_points(_response);
        });
    }

    protected processGet_points(response: Response): Promise<ApiResponse<AccountPointMap[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as AccountPointMap[];
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<AccountPointMap[]>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Random code for account
     */
    get_points_by_id(account_id: string, store: string, signal?: AbortSignal | undefined): Promise<ApiResponse<OfferPointsResponse>> {
        let url_ = this.baseUrl + "/points/{account_id}?";
        if (account_id === undefined || account_id === null)
            throw new Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (store === undefined || store === null)
            throw new Error("The parameter 'store' must be defined and cannot be null.");
        else
            url_ += "store=" + encodeURIComponent("" + store) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_points_by_id(_response);
        });
    }

    protected processGet_points_by_id(response: Response): Promise<ApiResponse<OfferPointsResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as OfferPointsResponse;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Account not found", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<OfferPointsResponse>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Account statistics
     */
    get_accounts(signal?: AbortSignal | undefined): Promise<ApiResponse<{ [key: string]: number; }>> {
        let url_ = this.baseUrl + "/statistics/account";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_accounts(_response);
        });
    }

    protected processGet_accounts(response: Response): Promise<ApiResponse<{ [key: string]: number; }>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as { [key: string]: number; };
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<{ [key: string]: number; }>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Total account count
     */
    get_total_accounts(signal?: AbortSignal | undefined): Promise<ApiResponse<number>> {
        let url_ = this.baseUrl + "/statistics/total-accounts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_total_accounts(_response);
        });
    }

    protected processGet_total_accounts(response: Response): Promise<ApiResponse<number>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : _responseText as number;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<number>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Config for current user
     */
    get_user_config(signal?: AbortSignal | undefined): Promise<ApiResponse<UserOptions>> {
        let url_ = this.baseUrl + "/user/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_user_config(_response);
        });
    }

    protected processGet_user_config(response: Response): Promise<ApiResponse<UserOptions>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as UserOptions;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("No config for this user", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<UserOptions>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Updated/created config
     */
    update_user_config(body: UserOptions, signal?: AbortSignal | undefined): Promise<ApiResponse<void>> {
        let url_ = this.baseUrl + "/user/config";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate_user_config(_response);
        });
    }

    protected processUpdate_user_config(response: Response): Promise<ApiResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return new ApiResponse(status, _headers, null as any);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Invalid configuration format", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<void>>(new ApiResponse(status, _headers, null as any));
    }

    /**
     * @return Spending information for this user
     */
    get_user_spending(signal?: AbortSignal | undefined): Promise<ApiResponse<UserSpending>> {
        let url_ = this.baseUrl + "/user/spending";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            signal,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet_user_spending(_response);
        });
    }

    protected processGet_user_spending(response: Response): Promise<ApiResponse<UserSpending>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver) as UserSpending;
            return new ApiResponse(status, _headers, result200);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApiResponse<UserSpending>>(new ApiResponse(status, _headers, null as any));
    }
}

export interface AccountPointMap {
    name: string;
    totalPoints: number;

    [key: string]: any;
}

export interface AccountResponse {

    [key: string]: number | any;
}

export interface AdminUserSpending {
    items: GetDealsOffer[];
    name: string;
    total: number;

    [key: string]: any;
}

export interface AdminUserSpendingMap {

    [key: string]: AdminUserSpending | any;
}

export interface GetDealsOffer {
    count: number;
    creationDateUtc: string;
    dealUuid: string;
    description: string;
    imageUrl: string;
    name: string;
    offerPropositionId: string;
    price?: number | undefined;
    shortName: string;
    validFromUtc: string;
    validToUtc: string;

    [key: string]: any;
}

export interface JwtClaim {
    aud: string;
    exp: number;
    iat: number;
    iss: string;
    oid: string;
    role: UserRole;
    sub: string;
    username: string;

    [key: string]: any;
}

export interface LastRefreshInformation {
    lastRefresh: string;

    [key: string]: any;
}

export interface LoginRequest {
    password: string;
    username: string;

    [key: string]: any;
}

export interface OfferPointsResponse {
    offerResponse: OfferResponse;
    pointsResponse: PointsResponse;

    [key: string]: any;
}

export interface OfferResponse {
    dealUuid?: string | undefined;
    message: string;
    randomCode: string;

    [key: string]: any;
}

export interface PointsResponse {
    lifeTimePoints: number;
    totalPoints: number;

    [key: string]: any;
}

export interface RegistrationRequest {
    password: string;
    token: string;
    username: string;

    [key: string]: any;
}

export interface RegistrationTokenResponse {
    qrCodeLink: string;
    registrationLink: string;
    token: string;

    [key: string]: any;
}

export interface RestaurantAddress {
    addressLine: string;

    [key: string]: any;
}

export interface RestaurantInformation {
    address: RestaurantAddress;
    name: string;
    storeNumber: number;

    [key: string]: any;
}

export interface TokenRequest {
    refreshToken: string;
    token: string;

    [key: string]: any;
}

export interface TokenResponse {
    refreshToken: string;
    role: UserRole;
    token: string;

    [key: string]: any;
}

export interface UserOptions {
    storeId: string;
    storeName?: string | undefined;

    [key: string]: any;
}

export enum UserRole {
    Admin = "admin",
    Privileged = "privileged",
    None = "none",
}

export interface UserSpending {
    items: GetDealsOffer[];
    total: number;

    [key: string]: any;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;

        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }

        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export class ApiResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}
