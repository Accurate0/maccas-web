/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin/auth/register": {
    post: operations["registration_token"];
  };
  "/admin/locked-deals": {
    get: operations["get_locked_deals"];
  };
  "/admin/locked-deals/{deal_id}": {
    post: operations["lock_deal"];
    delete: operations["unlock_deal"];
  };
  "/admin/user/spending": {
    get: operations["get_all_user_spending"];
  };
  "/auth/login": {
    post: operations["login"];
  };
  "/auth/register": {
    post: operations["register"];
  };
  "/auth/token": {
    post: operations["get_token"];
  };
  "/code/{deal_id}": {
    get: operations["get_code"];
  };
  "/deals": {
    get: operations["get_deals"];
  };
  "/deals/last-refresh": {
    get: operations["get_last_refresh"];
  };
  "/deals/{deal_id}": {
    get: operations["get_deal"];
    post: operations["add_deal"];
    delete: operations["remove_deal"];
  };
  "/docs/openapi": {
    get: operations["get_openapi"];
  };
  "/health/status": {
    get: operations["get_status"];
  };
  "/locations": {
    get: operations["get_locations"];
  };
  "/locations/search": {
    get: operations["search_locations"];
  };
  "/points": {
    get: operations["get_points"];
  };
  "/points/{account_id}": {
    get: operations["get_points_by_id"];
  };
  "/statistics/account": {
    get: operations["get_accounts"];
  };
  "/statistics/total-accounts": {
    get: operations["get_total_accounts"];
  };
  "/user/config": {
    get: operations["get_user_config"];
    post: operations["update_user_config"];
  };
  "/user/spending": {
    get: operations["get_user_spending"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AccountPointMap: {
      name: string;
      /** Format: int64 */
      totalPoints: number;
    };
    AccountPointResponse: components["schemas"]["AccountPointMap"][];
    AccountResponse: {
      [key: string]: number;
    };
    AdminLockedDealsResponse: string[];
    AdminUserSpending: {
      items: components["schemas"]["GetDealsOffer"][];
      name: string;
      /** Format: double */
      total: number;
    };
    AdminUserSpendingMap: {
      [key: string]: components["schemas"]["AdminUserSpending"];
    };
    GetDealsOffer: {
      /** Format: int32 */
      count: number;
      creationDateUtc: string;
      dealUuid: string;
      description: string;
      imageUrl: string;
      name: string;
      /** Format: double */
      price?: number | null;
      shortName: string;
      validFromUtc: string;
      validToUtc: string;
    };
    LastRefreshInformation: {
      lastRefresh: string;
    };
    LoginRequest: {
      password: string;
      username: string;
    };
    OfferPointsResponse: {
      offerResponse: components["schemas"]["OfferResponse"];
      pointsResponse: components["schemas"]["PointsResponse"];
    };
    OfferResponse: {
      message: string;
      randomCode: string;
    };
    PointsResponse: {
      /** Format: int64 */
      lifeTimePoints: number;
      /** Format: int64 */
      totalPoints: number;
    };
    RegistrationRequest: {
      password: string;
      username: string;
    };
    RestaurantAddress: {
      addressLine: string;
    };
    RestaurantInformation: {
      address: components["schemas"]["RestaurantAddress"];
      name: string;
      /** Format: int64 */
      storeNumber: number;
    };
    RestaurantInformationList: components["schemas"]["RestaurantInformation"][];
    TokenRequest: {
      refreshToken: string;
      token: string;
    };
    TokenResponse: {
      refreshToken: string;
      role: components["schemas"]["UserRole"];
      token: string;
    };
    UserOptions: {
      storeId: string;
      storeName?: string | null;
    };
    /** @enum {string} */
    UserRole: "admin" | "privileged" | "none";
    UserSpending: {
      items: components["schemas"]["GetDealsOffer"][];
      /** Format: double */
      total: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  registration_token: {
    responses: {
      /** @description Unlocked deal */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_locked_deals: {
    responses: {
      /** @description List of currently locked deals */
      200: {
        content: {
          "application/json": components["schemas"]["AdminLockedDealsResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  lock_deal: {
    parameters: {
      query?: {
        duration?: number | null;
      };
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** @description Lock this deal */
      204: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  unlock_deal: {
    parameters: {
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** @description Unlocked deal */
      204: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_all_user_spending: {
    responses: {
      /** @description List of currently locked deals */
      200: {
        content: {
          "application/json": components["schemas"]["AdminUserSpendingMap"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login and fetch auth and refresh tokens */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description Account doesn't exist */
      401: {
        content: never;
      };
      /** @description Authentication failed */
      403: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  register: {
    parameters: {
      query: {
        token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrationRequest"];
      };
    };
    responses: {
      /** @description Register a new account using a shared token */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description Account doesn't exist */
      401: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_token: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRequest"];
      };
    };
    responses: {
      /** @description Trade previous access and refresh token for new ones */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_code: {
    parameters: {
      query: {
        store: string;
      };
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** @description Random code for specified deal */
      200: {
        content: {
          "application/json": components["schemas"]["OfferResponse"];
        };
      };
      /** @description Deal not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_deals: {
    responses: {
      /** @description List of available deals */
      200: {
        content: {
          "application/json": components["schemas"]["GetDealsOffer"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_last_refresh: {
    responses: {
      /** @description Last Refresh of Cache */
      200: {
        content: {
          "application/json": components["schemas"]["LastRefreshInformation"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_deal: {
    parameters: {
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** @description Information for specified deal */
      200: {
        content: {
          "application/json": components["schemas"]["GetDealsOffer"];
        };
      };
      /** @description Deal not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  add_deal: {
    parameters: {
      query: {
        store: string;
      };
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** @description Added a deal */
      200: {
        content: {
          "application/json": components["schemas"]["OfferResponse"];
        };
      };
      /** @description Error on McDonald's side */
      400: {
        content: never;
      };
      /** @description Deal not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  remove_deal: {
    parameters: {
      query: {
        store: string;
      };
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** @description Removed a deal */
      204: {
        content: never;
      };
      /** @description Error on McDonald's side */
      400: {
        content: never;
      };
      /** @description Deal not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_openapi: {
    responses: {
      /** @description JSON OpenApi spec */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_status: {
    responses: {
      /** @description Server is healthy */
      204: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_locations: {
    parameters: {
      query: {
        distance: number;
        latitude: number;
        longitude: number;
      };
    };
    responses: {
      /** @description List of locations near specified coordinates */
      200: {
        content: {
          "application/json": components["schemas"]["RestaurantInformationList"];
        };
      };
      /** @description Invalid/missing parameters */
      400: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  search_locations: {
    parameters: {
      query: {
        text: string;
      };
    };
    responses: {
      /** @description Closest location near specified text */
      200: {
        content: {
          "application/json": components["schemas"]["RestaurantInformationList"];
        };
      };
      /** @description No locations found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_points: {
    responses: {
      /** @description List of all account points */
      200: {
        content: {
          "application/json": components["schemas"]["AccountPointResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_points_by_id: {
    parameters: {
      query: {
        store: string;
      };
      path: {
        account_id: string;
      };
    };
    responses: {
      /** @description Random code for account */
      200: {
        content: {
          "application/json": components["schemas"]["OfferPointsResponse"];
        };
      };
      /** @description Account not found */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_accounts: {
    responses: {
      /** @description Account statistics */
      200: {
        content: {
          "application/json": components["schemas"]["AccountResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_total_accounts: {
    responses: {
      /** @description Total account count */
      200: {
        content: {
          "text/plain": number;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_user_config: {
    responses: {
      /** @description Config for current user */
      200: {
        content: {
          "application/json": components["schemas"]["UserOptions"];
        };
      };
      /** @description No config for this user */
      404: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  update_user_config: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserOptions"];
      };
    };
    responses: {
      /** @description Updated/created config */
      204: {
        content: never;
      };
      /** @description Invalid configuration format */
      400: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
  get_user_spending: {
    responses: {
      /** @description Spending information for this user */
      200: {
        content: {
          "application/json": components["schemas"]["UserSpending"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: never;
      };
    };
  };
}
